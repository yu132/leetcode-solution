/**  
 * @ClassName: package-info  
 *
 * @Description: TODO(这里用一句话描述这个类的作用)  
 *
 * @author 余定邦  
 *
 * @date 2021年1月6日  
 *  
 */
package redo.Util.ag.array2D;

/*
 * 有序二维数组的两个问题：
 * (1).计算小于等于x的元素个数
 * (2).计算第k小的数
 * 
 * 有序二维数组指的是在行和列上都顺序不下降（上升或者相等）
 * 
 * 第一个问题非常简单，从数组的左下角使用双指针开始遍历，如果当前值小于等于x，那么指针向右移
 * 并且将计数加上上一列的数量，即i+1个，如果当前值小于x，那么我们向上移动，当指针移动到二维数组外时结束遍历
 * 
 * 第二个问题也很简单，我们每次猜测一个num，并且计算问题1中的答案，即可得到小于num的数量count，
 * 如果count小于k，那么对于指定的num一定是比第k小的数更小，因此下一次猜测的时候，下界就可以定为num+1，
 * 对于count大于等于k时，那么猜测的num是比第k小的数更大或者相当的，因此下一次猜测的时候，上界即为num，
 * 对于这种猜测，我们可以很简单的使用二分的方法进行，令low=arr[0][0]，high=arr[n-1][n-1]，
 * 每次遍历后更新low和high，直到low==high
 * 
 * 
 */
