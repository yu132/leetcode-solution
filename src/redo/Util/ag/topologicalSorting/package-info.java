/**  
 * @ClassName: package-info  
 *
 * @Description: TODO(这里用一句话描述这个类的作用)  
 *
 * @author 余定邦  
 *
 * @date 2021年1月7日  
 *  
 */
package redo.Util.ag.topologicalSorting;

/*
 * 拓扑排序是一类非常经典的问题，其主要目的就是求一个序列，使得序列中的每一个节点的前置节点都能出现在序列的前部
 * 
 * 并且拓扑排序也可以用于解决一些其他和这种先后顺序相关的题目，例如判断进行一系列的查询，查找某个节点是否为另一些
 * 节点的前置条件，如果这个问题使用Floyd是O(n^3)的复杂度，但是使用拓扑排序则可降低为O(n*e)的复杂度，e最大为O(n^2)
 * 因此最差情况下和Floyd复杂度相同，例子见leetcode-1462
 * 
 * 拓扑排序的思想很简单，就是使用一个队列，队列中存储所有入度为0的节点，每次从队列中取出一个节点，然后这个节点和其他
 * 节点之间的边删除，简单来说就是和这个点相连的点入度减一，然后如果这个点减完这个入度之后入度为0，
 * 那么将这个点加入队列中，直到将所有的点遍历一遍
 * 
 */
