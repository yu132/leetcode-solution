/**  
 * @ClassName: package-info  
 *
 * @Description: TODO(这里用一句话描述这个类的作用)  
 *
 * @author 余定邦  
 *
 * @date 2021年3月30日  
 *  
 */
package redo.Util.ag.subArray.countMaxMinDiffGreaterThanK;
/*
 * 本问题是寻找最大值和最小值之间相差大于等于K（小于等于K）的子数组的数量
 * 
 * 先看“小于等于K”的问题，
 * 
 * 思路不难，就是一个滑窗，固定左边的位置，然后观察当前增加最后一个之后的max和min是否
 * 依然小于等于K，如果不满足，那么就证明以i开头，以[i,j)结尾的子数组都满足要求，
 * 那么结果加上K即可。
 * 
 * 通过使用单调双端队列，可以O（n）维护最大最小值，即维护最大值时，队列单调递减
 * 压入该值之前，将比该值小的全部从尾部弹出，然后将该值从尾部压入，
 * 某个元素离开窗口时，检查队列头部的值是否和该值相同，如果相同则弹出，不相同意味着
 * 在别的元素压入队列的时候已经弹走了，因为是单调递减队列，因此队头为最大值
 * 
 * 大于等于K的问题可以直接转化为小于K的问题，即子数组的数量-小于K的子数组数量
 * 
 * 能否相等也很简单，就是在判断压入元素之后的条件那里进行调整即可
 */
